shiny::runApp()
runApp()
runApp()
a = readRDS("~/gitRepos/code_climate/season_adjusted_version4_province_level_past_future_climate_data.RDS")
View(a)
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
View(climate_data)
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
runApp()
runApp()
## Climate data preparation
#climate_data1 = readRDS("~/gitRepos/code_climate/province_level_past_future_climate_data.RDS")
climate_data = readRDS("~/gitRepos/code_climate/version4b_province_level_past_future_climate_data.RDS")
View(climate_data)
climate_data = readRDS("~/gitRepos/climate_tutorial_dashboard/dashboardApp_EN/data/climate_data_province_v3.RDS")
## Climate data preparation
#climate_data1 = readRDS("~/gitRepos/code_climate/province_level_past_future_climate_data.RDS")
climate_data = readRDS("~/gitRepos/code_climate/version4b_province_level_past_future_climate_data.RDS")
View(climate_data)
climate_data2 = readRDS("~/gitRepos/climate_tutorial_dashboard/dashboardApp_EN/data/climate_data_province_v3.RDS")
setdiff(colnames(climate_data2), colnames(climate_data)
)
View(climate_data)
colnameS(climate_data)
colnames(climate_data)
# Rename columns to fit with scenario encoding
all_climate_data = climate_data %>% rename(normal_ppt = norm_ppt,
drier_ppt = dry_ppt,
extreme_dry_ppt = drier_ppt,
more_wet_ppt = wet_ppt,
extreme_wet_ppt = wetter_ppt,
normal_temp = norm_temp,
warmer_temp = warm_temp,
colder_temp = cool_temp,
extreme_warm_temp = warmer_temp,
extreme_cold_temp = cooler_temp)
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
View(all_climate_data)
View(filtered_climate_data)
setdiff(colnames(filtered_climate_data), colnames(climate_data2))
View(climate_data2)
View(climate_data2)
runApp()
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
setdiff(colnames(filtered_climate_data), colnames(climate_data2))
runApp()
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
saveRDS(all_model_pred, file = "~/gitRepos/climate_tutorial_dashboard/dashboardApp_FR/data/model_predictions_province_30Nov.RDS")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
View(all_model_pred)
provinces_list = unique(model_params$Province)
provinces_list
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
provinces_list
View(climate_data_df)
View(model_params)
rlang::last_trace()
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
rlang::last_trace()
debugSource("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
View(results)
# Rename columns and calculate incidence per 10000 from incidence per 500000
results = results %>% rename(inc_5 = inc_C/50, inc_all = inc/50)
colnames(results)
# Rename columns and calculate incidence per 10000 from incidence per 500000
results = results %>% dplyr::rename(inc_5 = inc_C/50, inc_all = inc/50)
# Rename columns and calculate incidence per 10000 from incidence per 500000
results = results %>% dplyr::rename(inc_5 = inc_C/5, inc_all = inc/5)
# Rename columns and calculate incidence per 10000 from incidence per 500000
results = results %>% dplyr::rename(inc_5 = inc_C/50, inc_all = inc/50)
results$inc_5 = results$inc_5/50
# Rename columns and calculate incidence per 10000 from incidence per 500000
results = results %>% dplyr::rename(inc_5 = inc_C, inc_all = inc)
View(results)
results$inc_5 = results$inc_5/50
results$inc_all = results$inc_all/50
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
View(all_model_pred)
seq(20, 28, by = 2)
a = readRDS("~/gitRepos/code_climate/kigali_discrete_scen_results.RDS")
View(a)
source("~/gitRepos/climate_tutorial_dashboard/processing_scripts/generate_model_data.R")
climate_data_df = readRDS("~/gitRepos/climate_tutorial_dashboard/processing_scripts/all_climate_data_province_v7.RDS")
View(climate_data_df)
temp_discrete_scenarios = paste0("temp_", seq(20, 34, by = 1), "C")
temp_discrete_scenarios
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
View(all_model_pred)
all_model_pred = year(all_model_pred$date_ymd)
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
View(all_model_pred)
model_pred_scen = all_model_pred %>% group_by(year, temp_scen, rain_scen, province) %>%
summarise(EIR_year = sum(EIR),
inc_5_year = sum(inc_5),
inc_all_year = sum(inc_all))
View(all_model_pred)
View(model_pred_scen)
model_pred_scen = model_pred_scen %>% filter(rain_scen == "normal_ppt")
View(model_pred_scen)
model_pred_scen = model_pred_scen %>% filter(rain_scen == "normal_ppt", province == "Kigali City")
View(model_pred_scen)
ggplot(data = model_pred_scen, aes(x = temp_scen, y = EIR_year, color = year)) + geom_line()
ggplot(data = model_pred_scen, aes(x = temp_scen, y = EIR_year, color = as.factor(year))) + geom_line()
model_pred_scen = model_pred_scen %>% filter(rain_scen == "normal_ppt", province == "Kigali City", year == 2022)
ggplot(data = model_pred_scen, aes(x = temp_scen, y = EIR_year)) + geom_line()
ggplot(data = model_pred_scen, aes(x = temp_scen, y = EIR_year)) + geom_point()
model_pred_scen = all_model_pred %>% group_by(year, temp_scen, rain_scen, province) %>%
summarise(EIR_year = sum(EIR),
inc_5_year = sum(inc_5),
inc_all_year = sum(inc_all))
model_pred_scen = model_pred_scen %>% filter(rain_scen == "normal_ppt",
province == "Kigali City",
year == 2023)
ggplot(data = model_pred_scen, aes(x = temp_scen, y = EIR_year)) + geom_point()
View(all_model_pred)
source("~/gitRepos/malclimsim/dashboard_processing_scripts/generate_model_predictions.R")
install_github("SwissTPH/malclimsim")
library("devtools")
install_github("SwissTPH/malclimsim")
